import streamlit as st
import pickle
import numpy as np

# Load the saved models
with open("spam_detection_model.pkl", "rb") as file:
    nb_model = pickle.load(file)  # Na√Øve Bayes Model

with open("spam_detection_rf.pkl", "rb") as file:
    rf_model = pickle.load(file)  # Random Forest Model

# Streamlit UI
st.set_page_config(page_title="Email Spam Detector", page_icon="üì©", layout="wide")

st.title("üì© Email Spam Detection")
st.write("Enter an email message to check if it's **Spam or Not Spam**.")

# Sidebar - Model Selection & Theme
st.sidebar.title("‚öô Settings")
model_choice = st.sidebar.radio("Select Model:", ["Na√Øve Bayes", "Random Forest"])
st.sidebar.markdown("---")

# Input Box for Email Text
email_text = st.text_area("‚úâÔ∏è Enter your email message:", height=150)

# Predict Button
if st.button("üîç Detect Spam"):
    if email_text.strip():  # Ensure input is not empty
        # Convert input to list (needed for model prediction)
        email_input = [email_text]

        # Choose model based on user selection
        if model_choice == "Na√Øve Bayes":
            model = nb_model
        else:
            model = rf_model

        # Predict the result
        prediction = model.predict(email_input)[0]  # 0 = Not Spam, 1 = Spam
        probability = model.predict_proba(email_input)[0][1]  # Probability of Spam

        # Display results with styling
        st.subheader("üßê Prediction Result")
        if prediction == 1:
            st.error(f"‚ö†Ô∏è **Spam Email!** (Confidence: {probability * 100:.2f}%)")
        else:
            st.success(f"‚úÖ **Not Spam!** (Confidence: {(1 - probability) * 100:.2f}%)")
    else:
        st.warning("‚ö†Ô∏è Please enter an email message to analyze.")

# Footer
st.sidebar.markdown("---")
st.sidebar.info("Stay Spam Free‚ò†Ô∏è")
